class Solution {
public:
    // Check if the cell (x, y) is within the board boundaries
    bool isValidNeighbor(int x, int y, vector<vector<int>>& board) {
        return (x >= 0 && x < board.size() && y >= 0 && y < board[0].size());
    }

    // Function to update the board according to the Game of Life rules
    void gameOfLife(vector<vector<int>>& board) {
        // Directions for the 8 neighboring cells
        vector<int> dx = {0, 0, 1, 1, 1, -1, -1, -1};
        vector<int> dy = {1, -1, 1, -1, 0, 0, 1, -1};

        // First pass to mark the changes
        for (int row = 0; row < board.size(); row++) {
            for (int col = 0; col < board[0].size(); col++) {
                int count_live_neighbors = 0;

                // Count live neighbors
                for (int i = 0; i < 8; i++) {
                    int curr_x = row + dx[i];
                    int curr_y = col + dy[i];
                    if (isValidNeighbor(curr_x, curr_y, board) &&
                        abs(board[curr_x][curr_y]) == 1) // abs handles temporary state
                        count_live_neighbors++;
                }

                // Apply the rules of the Game of Life
                if (board[row][col] == 1 && 
                    (count_live_neighbors < 2 || count_live_neighbors > 3))
                    // Live cell dies
                    board[row][col] = -1; // -1 means the cell was originally alive and is now dead

                if (board[row][col] == 0 && count_live_neighbors == 3)
                    // Dead cell becomes live
                    board[row][col] = 2; // 2 means the cell was originally dead and is now alive
            }
        }

        // Second pass to finalize the board state
        for (int row = 0; row < board.size(); row++) {
            for (int col = 0; col < board[0].size(); col++) {
                if (board[row][col] >= 1)
                    // If the cell was alive or marked to become alive, set it to 1
                    board[row][col] = 1;
                else
                    // If the cell was dead or marked to become dead, set it to 0
                    board[row][col] = 0;
            }
        }
    }
};
