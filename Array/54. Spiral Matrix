class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;

        // Return empty result if the input matrix is empty
        if (matrix.empty()) {
            return result;
        }

        // Initialize boundary indices
        int rowBeg = 0;  // Starting row index
        int rowEnd = matrix.size() - 1;  // Ending row index
        int colBeg = 0;  // Starting column index
        int colEnd = matrix[0].size() - 1;  // Ending column index

        // Loop until we traverse all layers of the matrix
        while (rowBeg <= rowEnd && colBeg <= colEnd) {
            // Traverse from left to right along the top row
            for (int i = colBeg; i <= colEnd; ++i) {
                result.push_back(matrix[rowBeg][i]);
            }
            ++rowBeg;  // Move the top boundary down

            // Traverse from top to bottom along the right column
            for (int i = rowBeg; i <= rowEnd; ++i) {
                result.push_back(matrix[i][colEnd]);
            }
            --colEnd;  // Move the right boundary left

            // Traverse from right to left along the bottom row, if there are rows left to process
            if (rowBeg <= rowEnd) {
                for (int i = colEnd; i >= colBeg; --i) {
                    result.push_back(matrix[rowEnd][i]);
                }
                --rowEnd;  // Move the bottom boundary up
            }

            // Traverse from bottom to top along the left column, if there are columns left to process
            if (colBeg <= colEnd) {
                for (int i = rowEnd; i >= rowBeg; --i) {
                    result.push_back(matrix[i][colBeg]);
                }
                ++colBeg;  // Move the left boundary right
            }
        }

        // Return the result containing elements in spiral order
        return result;
    }
};
