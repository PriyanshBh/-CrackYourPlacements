 bool isPossible(int arr[], int n, int m, long long maxPages) {
        int studentsRequired = 1;
        long long currentPages = 0;
        
        for (int i = 0; i < n; i++) {
            if (arr[i] > maxPages) {
                return false; // A single book has more pages than maxPages, not possible
            }
            
            if (currentPages + arr[i] > maxPages) {
                studentsRequired++;
                currentPages = arr[i];
                
                if (studentsRequired > m) {
                    return false;
                }
            } else {
                currentPages += arr[i];
            }
        }
        
        return true;
    }

    // Function to find the minimum number of pages.
    long long findPages(int arr[], int n, int m) {
        if (n < m) {
            return -1; // Not enough books for each student
        }
        
        long long sum = 0;
        long long maxBook = 0;
        
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            maxBook = std::max(maxBook, (long long)arr[i]);
        }
        
        long long low = maxBook;
        long long high = sum;
        long long result = -1;
        
        while (low <= high) {
            long long mid = (low + high) / 2;
            
            if (isPossible(arr, n, m, mid)) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return result;
    }
};
