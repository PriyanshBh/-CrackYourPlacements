/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        // Step 1: Check if there are at least k nodes remaining
        ListNode* curr = head;
        int count = 0;
        while (curr != nullptr && count < k) {
            curr = curr->next;
            count++;
        }

        // Step 2: If there are fewer than k nodes, return head as is
        if (count < k) return head;

        // Step 3: Reverse the first k nodes
        ListNode* prev = nullptr;
        curr = head;
        ListNode* next = nullptr;
        for (int i = 0; i < k; i++) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        // Step 4: Recursively reverse the rest of the list and connect it with the current segment
        if (next != nullptr) {
            head->next = reverseKGroup(next, k);
        }

        // Step 5: Return the new head of the reversed segment
        return prev;
    }
};
